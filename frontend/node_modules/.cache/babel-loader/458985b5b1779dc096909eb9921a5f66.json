{"ast":null,"code":"function isUUID(uuid) {\n  let s = '' + uuid;\n  s = s.match('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$');\n  return s !== null;\n}\n\nfunction getBreadcrumb(urlComponents) {\n  if (urlComponents.length) {\n    const urlComponent = urlComponents.shift();\n    return {\n      name: urlComponent,\n      path: `/${urlComponent}`\n    };\n  }\n}\n\nexport function getBreadcrumbs(pathname, uuidToName) {\n  let breadcrumbs = [];\n  let urlComponents = pathname.split('/');\n\n  if (urlComponents[0] === '') {\n    urlComponents.shift();\n  }\n\n  while (urlComponents.length) {\n    let breadcrumb = getBreadcrumb(urlComponents);\n\n    if (isUUID(breadcrumb.name) && breadcrumbs.length && !isUUID(breadcrumbs[breadcrumbs.length - 1])) {\n      let targetMatching = uuidToName[breadcrumbs[breadcrumbs.length - 1].name];\n      let targetData = targetMatching && targetMatching.source && (targetMatching.sourcePropertyInner ? targetMatching.source[targetMatching.sourceProperty][targetMatching.sourcePropertyInner] : targetMatching.source[targetMatching.sourceProperty]);\n      let targetData2 = targetMatching && targetMatching.source2 && targetMatching.source2[targetMatching.sourceProperty2];\n\n      if (targetData2 && breadcrumbs.length > 2) {\n        targetData = targetData2;\n      }\n\n      if (targetData) {\n        let propertyNames = targetMatching.properties.map(property => {\n          return targetData[property];\n        });\n\n        if (propertyNames.length) {\n          breadcrumb.name = propertyNames.join(' ');\n        }\n      }\n    }\n\n    if (breadcrumb.name) {\n      breadcrumbs.push(breadcrumb);\n    }\n  }\n\n  let path = '';\n\n  for (let i = 0; i < breadcrumbs.length; i++) {\n    path = `${path}${breadcrumbs[i].path}`;\n    breadcrumbs[i].path = path;\n  }\n\n  return breadcrumbs;\n}","map":{"version":3,"sources":["/Users/emilian.radu/Developer/AIProject/frontend/src/helpers/breadcrumbsGenerator.js"],"names":["isUUID","uuid","s","match","getBreadcrumb","urlComponents","length","urlComponent","shift","name","path","getBreadcrumbs","pathname","uuidToName","breadcrumbs","split","breadcrumb","targetMatching","targetData","source","sourcePropertyInner","sourceProperty","targetData2","source2","sourceProperty2","propertyNames","properties","map","property","join","push","i"],"mappings":"AAAA,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAIC,CAAC,GAAG,KAAKD,IAAb;AACAC,EAAAA,CAAC,GAAGA,CAAC,CAACC,KAAF,CAAQ,+EAAR,CAAJ;AACA,SAAOD,CAAC,KAAK,IAAb;AACD;;AAED,SAASE,aAAT,CAAuBC,aAAvB,EAAsC;AACpC,MAAIA,aAAa,CAACC,MAAlB,EAA0B;AACxB,UAAMC,YAAY,GAAGF,aAAa,CAACG,KAAd,EAArB;AACA,WAAO;AACLC,MAAAA,IAAI,EAAEF,YADD;AAELG,MAAAA,IAAI,EAAG,IAAGH,YAAa;AAFlB,KAAP;AAID;AACF;;AAED,OAAO,SAASI,cAAT,CAAwBC,QAAxB,EAAkCC,UAAlC,EAA8C;AACnD,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIT,aAAa,GAAGO,QAAQ,CAACG,KAAT,CAAe,GAAf,CAApB;;AACA,MAAIV,aAAa,CAAC,CAAD,CAAb,KAAqB,EAAzB,EAA6B;AAC3BA,IAAAA,aAAa,CAACG,KAAd;AACD;;AACD,SAAOH,aAAa,CAACC,MAArB,EAA6B;AAC3B,QAAIU,UAAU,GAAGZ,aAAa,CAACC,aAAD,CAA9B;;AACA,QAAIL,MAAM,CAACgB,UAAU,CAACP,IAAZ,CAAN,IAA2BK,WAAW,CAACR,MAAvC,IAAiD,CAACN,MAAM,CAACc,WAAW,CAACA,WAAW,CAACR,MAAZ,GAAqB,CAAtB,CAAZ,CAA5D,EAAmG;AACjG,UAAIW,cAAc,GAAGJ,UAAU,CAACC,WAAW,CAACA,WAAW,CAACR,MAAZ,GAAqB,CAAtB,CAAX,CAAoCG,IAArC,CAA/B;AACA,UAAIS,UAAU,GAAGD,cAAc,IAAIA,cAAc,CAACE,MAAjC,KAA4CF,cAAc,CAACG,mBAAf,GAAqCH,cAAc,CAACE,MAAf,CAAsBF,cAAc,CAACI,cAArC,EAAqDJ,cAAc,CAACG,mBAApE,CAArC,GAAgIH,cAAc,CAACE,MAAf,CAAsBF,cAAc,CAACI,cAArC,CAA5K,CAAjB;AACA,UAAIC,WAAW,GAAGL,cAAc,IAAIA,cAAc,CAACM,OAAjC,IAA4CN,cAAc,CAACM,OAAf,CAAuBN,cAAc,CAACO,eAAtC,CAA9D;;AACA,UAAIF,WAAW,IAAIR,WAAW,CAACR,MAAZ,GAAqB,CAAxC,EAA2C;AACzCY,QAAAA,UAAU,GAAGI,WAAb;AACD;;AACD,UAAIJ,UAAJ,EAAgB;AACd,YAAIO,aAAa,GAAGR,cAAc,CAACS,UAAf,CAA0BC,GAA1B,CAA+BC,QAAD,IAAc;AAC9D,iBAAOV,UAAU,CAACU,QAAD,CAAjB;AACD,SAFmB,CAApB;;AAGA,YAAIH,aAAa,CAACnB,MAAlB,EAA0B;AACxBU,UAAAA,UAAU,CAACP,IAAX,GAAkBgB,aAAa,CAACI,IAAd,CAAmB,GAAnB,CAAlB;AACD;AACF;AACF;;AACD,QAAIb,UAAU,CAACP,IAAf,EAAqB;AACnBK,MAAAA,WAAW,CAACgB,IAAZ,CAAiBd,UAAjB;AACD;AACF;;AACD,MAAIN,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,WAAW,CAACR,MAAhC,EAAwCyB,CAAC,EAAzC,EAA6C;AAC3CrB,IAAAA,IAAI,GAAI,GAAEA,IAAK,GAAEI,WAAW,CAACiB,CAAD,CAAX,CAAerB,IAAK,EAArC;AACAI,IAAAA,WAAW,CAACiB,CAAD,CAAX,CAAerB,IAAf,GAAsBA,IAAtB;AACD;;AACD,SAAOI,WAAP;AACD","sourcesContent":["function isUUID(uuid) {\r\n  let s = '' + uuid\r\n  s = s.match('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')\r\n  return s !== null\r\n}\r\n\r\nfunction getBreadcrumb(urlComponents) {\r\n  if (urlComponents.length) {\r\n    const urlComponent = urlComponents.shift()\r\n    return {\r\n      name: urlComponent,\r\n      path: `/${urlComponent}`\r\n    }\r\n  }\r\n}\r\n\r\nexport function getBreadcrumbs(pathname, uuidToName) {\r\n  let breadcrumbs = []\r\n  let urlComponents = pathname.split('/')\r\n  if (urlComponents[0] === '') {\r\n    urlComponents.shift()\r\n  }\r\n  while (urlComponents.length) {\r\n    let breadcrumb = getBreadcrumb(urlComponents)\r\n    if (isUUID(breadcrumb.name) && breadcrumbs.length && !isUUID(breadcrumbs[breadcrumbs.length - 1])) {\r\n      let targetMatching = uuidToName[breadcrumbs[breadcrumbs.length - 1].name]\r\n      let targetData = targetMatching && targetMatching.source && (targetMatching.sourcePropertyInner ? targetMatching.source[targetMatching.sourceProperty][targetMatching.sourcePropertyInner] : targetMatching.source[targetMatching.sourceProperty])\r\n      let targetData2 = targetMatching && targetMatching.source2 && targetMatching.source2[targetMatching.sourceProperty2]\r\n      if (targetData2 && breadcrumbs.length > 2) {\r\n        targetData = targetData2\r\n      }\r\n      if (targetData) {\r\n        let propertyNames = targetMatching.properties.map((property) => {\r\n          return targetData[property]\r\n        })\r\n        if (propertyNames.length) {\r\n          breadcrumb.name = propertyNames.join(' ')\r\n        }\r\n      }\r\n    }\r\n    if (breadcrumb.name) {\r\n      breadcrumbs.push(breadcrumb)\r\n    }\r\n  }\r\n  let path = ''\r\n  for (let i = 0; i < breadcrumbs.length; i++) {\r\n    path = `${path}${breadcrumbs[i].path}`\r\n    breadcrumbs[i].path = path\r\n  }\r\n  return breadcrumbs\r\n}"]},"metadata":{},"sourceType":"module"}