{"ast":null,"code":"import axios from 'axios';\nimport { API_URL, clientConfig } from '../../config/constants';\nimport { makeAuthRequest } from '../../helpers/requestHelpers';\nexport const REQUEST_AUTH_TOKEN = 'REQUEST_AUTH_TOKEN';\nexport const REQUEST_AUTH_TOKEN_FAILED = 'REQUEST_AUTH_TOKEN_FAILED';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const GET_USER_SUCCESS = 'GET_USER_SUCCESS';\nexport const login = async (authContext, email, password, history) => {\n  let response;\n\n  try {\n    response = await axios({\n      url: `${API_URL}/login`,\n      method: 'post',\n      data: {\n        email: email,\n        password: password\n      }\n    }).then(res => res);\n  } catch (err) {\n    authContext.dispatch({\n      type: REQUEST_AUTH_TOKEN_FAILED,\n      payload: err.response\n    });\n  }\n\n  if (response) {\n    authContext.dispatch({\n      type: REQUEST_AUTH_TOKEN,\n      payload: response.data\n    });\n    history.push('/');\n  }\n};\nexport const register = async (authContext, email, password, firstName, lastName, history) => {\n  let response;\n\n  try {\n    response = await axios({\n      url: `${API_URL}/register`,\n      method: 'post',\n      data: {\n        email: email,\n        password: password,\n        firstName: firstName,\n        lastName: lastName,\n        isAdmin: false\n      }\n    }).then(res => res);\n  } catch (err) {\n    authContext.dispatch({\n      type: REQUEST_AUTH_TOKEN_FAILED,\n      payload: err.response\n    });\n  }\n\n  if (response) {\n    authContext.dispatch({\n      type: 'REGISTER_USER_SUCCESS',\n      payload: response.data\n    });\n    history.push('/');\n  }\n};\nexport const logout = async ({\n  authContext\n}) => {\n  authContext.dispatch({\n    type: LOGOUT_SUCCESS\n  });\n};\nexport const getUser = async authContext => {\n  const response = await makeAuthRequest({\n    url: `${API_URL}/me`,\n    method: 'get'\n  })(authContext);\n\n  if (response && response.data) {\n    authContext.dispatch({\n      type: GET_USER_SUCCESS,\n      payload: response.data\n    });\n  }\n};\nexport const refreshToken = async authContext => {\n  try {\n    const response = await axios({\n      url: `${API_URL}/oauth2/token`,\n      method: 'post',\n      data: { ...clientConfig,\n        refresh_token: authContext.state.refresh_token,\n        grant_type: 'refresh_token'\n      }\n    });\n    authContext.dispatch({\n      type: REQUEST_AUTH_TOKEN,\n      payload: response.data\n    });\n    return response.data;\n  } catch (e) {\n    authContext.dispatch({\n      type: REQUEST_AUTH_TOKEN_FAILED\n    });\n  }\n};\nexport const UPDATE_USER_DETAILS = 'UPDATE_USER_DETAILS';\nexport const UPDATE_USER_DETAILS_SUCCESS = 'UPDATE_USER_DETAILS_SUCCESS';\nexport const UPDATE_USER_DETAILS_FAIL = 'UPDATE_USER_DETAILS_FAIL';\nexport const getUsers = async ({\n  authContext\n}) => {\n  authContext.dispatch({\n    type: UPDATE_USER_DETAILS\n  });\n  const response = await makeAuthRequest({\n    url: `${API_URL}/users`,\n    method: 'get'\n  })(authContext);\n  response && authContext.dispatch({\n    type: UPDATE_USER_DETAILS_SUCCESS,\n    payload: response.data\n  });\n  !response && authContext.dispatch({\n    type: UPDATE_USER_DETAILS_FAIL\n  });\n};","map":{"version":3,"sources":["/Users/emilian.radu/Developer/AIProject/frontend/src/components/Auth/AuthActions.js"],"names":["axios","API_URL","clientConfig","makeAuthRequest","REQUEST_AUTH_TOKEN","REQUEST_AUTH_TOKEN_FAILED","LOGOUT_SUCCESS","GET_USER_SUCCESS","login","authContext","email","password","history","response","url","method","data","then","res","err","dispatch","type","payload","push","register","firstName","lastName","isAdmin","logout","getUser","refreshToken","refresh_token","state","grant_type","e","UPDATE_USER_DETAILS","UPDATE_USER_DETAILS_SUCCESS","UPDATE_USER_DETAILS_FAIL","getUsers"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { API_URL, clientConfig } from '../../config/constants'\r\nimport { makeAuthRequest } from '../../helpers/requestHelpers'\r\n\r\nexport const REQUEST_AUTH_TOKEN = 'REQUEST_AUTH_TOKEN'\r\nexport const REQUEST_AUTH_TOKEN_FAILED = 'REQUEST_AUTH_TOKEN_FAILED'\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\r\nexport const GET_USER_SUCCESS = 'GET_USER_SUCCESS'\r\n\r\nexport const login = async (authContext, email, password, history) => {\r\n  let response\r\n  try {\r\n    response = await axios({\r\n      url: `${API_URL}/login`,\r\n      method: 'post',\r\n      data: {\r\n        email: email,\r\n        password: password\r\n      }\r\n    }\r\n    ).then(res=>res)\r\n  } catch (err) {\r\n    authContext.dispatch({\r\n      type: REQUEST_AUTH_TOKEN_FAILED,\r\n      payload: err.response\r\n    })\r\n  }\r\n  if (response) {\r\n    authContext.dispatch({\r\n      type: REQUEST_AUTH_TOKEN,\r\n      payload: response.data\r\n    })\r\n    history.push('/')\r\n  }\r\n}\r\n\r\n\r\nexport const register = async (authContext, email, password,firstName,lastName, history) => {\r\n  let response\r\n  try {\r\n    response = await axios({\r\n          url: `${API_URL}/register`,\r\n          method: 'post',\r\n          data: {\r\n            email: email,\r\n            password: password,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            isAdmin: false\r\n          }\r\n        }\r\n    ).then(res=>res)\r\n  } catch (err) {\r\n    authContext.dispatch({\r\n      type: REQUEST_AUTH_TOKEN_FAILED,\r\n      payload: err.response\r\n    })\r\n  }\r\n  if (response) {\r\n    authContext.dispatch({\r\n      type: 'REGISTER_USER_SUCCESS',\r\n      payload: response.data\r\n    })\r\n    history.push('/')\r\n  }\r\n}\r\nexport const logout = async ({ authContext }) => {\r\n  authContext.dispatch({\r\n    type: LOGOUT_SUCCESS\r\n  })\r\n}\r\nexport const getUser = async (authContext) => {\r\n  const response = await makeAuthRequest({\r\n    url: `${API_URL}/me`,\r\n    method: 'get'\r\n  })(authContext)\r\n  if (response && response.data) {\r\n    authContext.dispatch({\r\n      type: GET_USER_SUCCESS,\r\n      payload: response.data\r\n    })\r\n  }\r\n}\r\nexport const refreshToken = async (authContext) => {\r\n  try {\r\n    const response = await axios({\r\n      url: `${API_URL}/oauth2/token`,\r\n      method: 'post',\r\n      data: {\r\n        ...clientConfig,\r\n        refresh_token: authContext.state.refresh_token,\r\n        grant_type: 'refresh_token'\r\n      }\r\n    }\r\n    )\r\n    authContext.dispatch({\r\n      type: REQUEST_AUTH_TOKEN,\r\n      payload: response.data\r\n    })\r\n    return response.data\r\n  } catch (e) {\r\n    authContext.dispatch({\r\n      type: REQUEST_AUTH_TOKEN_FAILED\r\n    })\r\n  }\r\n}\r\n\r\nexport const UPDATE_USER_DETAILS = 'UPDATE_USER_DETAILS'\r\nexport const UPDATE_USER_DETAILS_SUCCESS = 'UPDATE_USER_DETAILS_SUCCESS'\r\nexport const UPDATE_USER_DETAILS_FAIL = 'UPDATE_USER_DETAILS_FAIL'\r\n\r\nexport const getUsers = async ({authContext}) => {\r\n  authContext.dispatch({\r\n    type: UPDATE_USER_DETAILS\r\n  })\r\n  const response = await makeAuthRequest({\r\n    url: `${API_URL}/users`,\r\n    method: 'get',\r\n  })(authContext)\r\n  response && authContext.dispatch({\r\n    type: UPDATE_USER_DETAILS_SUCCESS,\r\n    payload: response.data\r\n  })\r\n  !response && authContext.dispatch({\r\n    type: UPDATE_USER_DETAILS_FAIL\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}