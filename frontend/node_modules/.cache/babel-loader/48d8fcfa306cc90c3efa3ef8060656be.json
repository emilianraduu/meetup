{"ast":null,"code":"import { API_URL } from '../../config/constants';\nimport { makeAuthRequest } from '../../helpers/requestHelpers';\nimport { showSuccess } from \"../Global/Toast\";\nexport const FETCH_ROOMS = 'FETCH_ROOMS';\nexport const FETCH_ROOMS_SUCCESS = 'FETCH_ROOMS_SUCCESS';\nexport const getRooms = async ({\n  authContext,\n  roomsContext\n}) => {\n  roomsContext.dispatch({\n    type: FETCH_ROOMS,\n    payload: {\n      loading: true\n    }\n  });\n  const response = await makeAuthRequest({\n    url: `${API_URL}/rooms`,\n    method: 'get'\n  })(authContext);\n\n  if (response) {\n    roomsContext.dispatch({\n      type: FETCH_ROOMS_SUCCESS,\n      payload: {\n        data: response.data,\n        loading: false\n      }\n    });\n  } else {\n    roomsContext.dispatch({\n      type: FETCH_ROOMS,\n      payload: {\n        loading: true\n      }\n    });\n  }\n};\nexport const CREATE_ROOM = 'CREATE_ROOM';\nexport const CREATE_ROOM_SUCCESS = 'CREATE_ROOM_SUCCESS';\nexport const createRoom = async ({\n  authContext,\n  roomsContext,\n  data,\n  history\n}) => {\n  roomsContext.dispatch({\n    type: CREATE_ROOM,\n    payload: {\n      loading: true\n    }\n  });\n  const response = await makeAuthRequest({\n    url: `${API_URL}/rooms/create`,\n    method: 'post',\n    data\n  })(authContext);\n\n  if (response) {\n    roomsContext.dispatch({\n      type: CREATE_ROOM_SUCCESS,\n      payload: {\n        data: response.data,\n        loading: false\n      }\n    });\n    showSuccess('Room created');\n    history.push('/rooms');\n  } else {\n    roomsContext.dispatch({\n      type: FETCH_ROOMS,\n      payload: {\n        loading: true\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/emilian.radu/Developer/meetup/frontend/src/components/Rooms/RoomsActions.js"],"names":["API_URL","makeAuthRequest","showSuccess","FETCH_ROOMS","FETCH_ROOMS_SUCCESS","getRooms","authContext","roomsContext","dispatch","type","payload","loading","response","url","method","data","CREATE_ROOM","CREATE_ROOM_SUCCESS","createRoom","history","push"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,wBAAtB;AACA,SAAQC,eAAR,QAA8B,8BAA9B;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,QAAQ,GAAG,OAAO;AAACC,EAAAA,WAAD;AAAcC,EAAAA;AAAd,CAAP,KAAuC;AAC3DA,EAAAA,YAAY,CAACC,QAAb,CAAsB;AAClBC,IAAAA,IAAI,EAAEN,WADY;AAElBO,IAAAA,OAAO,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV;AAFS,GAAtB;AAIA,QAAMC,QAAQ,GAAG,MAAMX,eAAe,CAAC;AACnCY,IAAAA,GAAG,EAAG,GAAEb,OAAQ,QADmB;AAEnCc,IAAAA,MAAM,EAAE;AAF2B,GAAD,CAAf,CAGpBR,WAHoB,CAAvB;;AAIA,MAAIM,QAAJ,EAAc;AACVL,IAAAA,YAAY,CAACC,QAAb,CAAsB;AAClBC,MAAAA,IAAI,EAAEL,mBADY;AAElBM,MAAAA,OAAO,EAAE;AAACK,QAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAhB;AAAsBJ,QAAAA,OAAO,EAAE;AAA/B;AAFS,KAAtB;AAIH,GALD,MAKO;AACHJ,IAAAA,YAAY,CAACC,QAAb,CAAsB;AAClBC,MAAAA,IAAI,EAAEN,WADY;AAElBO,MAAAA,OAAO,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV;AAFS,KAAtB;AAIH;AACJ,CApBM;AAsBP,OAAO,MAAMK,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAACZ,EAAAA,WAAD;AAAcC,EAAAA,YAAd;AAA4BQ,EAAAA,IAA5B;AAAkCI,EAAAA;AAAlC,CAAP,KAAsD;AAC5EZ,EAAAA,YAAY,CAACC,QAAb,CAAsB;AAClBC,IAAAA,IAAI,EAAEO,WADY;AAElBN,IAAAA,OAAO,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV;AAFS,GAAtB;AAIA,QAAMC,QAAQ,GAAG,MAAMX,eAAe,CAAC;AACnCY,IAAAA,GAAG,EAAG,GAAEb,OAAQ,eADmB;AAEnCc,IAAAA,MAAM,EAAE,MAF2B;AAGnCC,IAAAA;AAHmC,GAAD,CAAf,CAIpBT,WAJoB,CAAvB;;AAKA,MAAIM,QAAJ,EAAc;AACVL,IAAAA,YAAY,CAACC,QAAb,CAAsB;AAClBC,MAAAA,IAAI,EAAEQ,mBADY;AAElBP,MAAAA,OAAO,EAAE;AAACK,QAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAhB;AAAsBJ,QAAAA,OAAO,EAAE;AAA/B;AAFS,KAAtB;AAIAT,IAAAA,WAAW,CAAC,cAAD,CAAX;AACAiB,IAAAA,OAAO,CAACC,IAAR,CAAa,QAAb;AACH,GAPD,MAOO;AACHb,IAAAA,YAAY,CAACC,QAAb,CAAsB;AAClBC,MAAAA,IAAI,EAAEN,WADY;AAElBO,MAAAA,OAAO,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV;AAFS,KAAtB;AAIH;AACJ,CAvBM","sourcesContent":["import {API_URL} from '../../config/constants'\nimport {makeAuthRequest} from '../../helpers/requestHelpers'\nimport {showSuccess} from \"../Global/Toast\";\n\nexport const FETCH_ROOMS = 'FETCH_ROOMS'\nexport const FETCH_ROOMS_SUCCESS = 'FETCH_ROOMS_SUCCESS'\n\nexport const getRooms = async ({authContext, roomsContext}) => {\n    roomsContext.dispatch({\n        type: FETCH_ROOMS,\n        payload: {loading: true}\n    })\n    const response = await makeAuthRequest({\n        url: `${API_URL}/rooms`,\n        method: 'get'\n    })(authContext)\n    if (response) {\n        roomsContext.dispatch({\n            type: FETCH_ROOMS_SUCCESS,\n            payload: {data: response.data, loading: false}\n        })\n    } else {\n        roomsContext.dispatch({\n            type: FETCH_ROOMS,\n            payload: {loading: true}\n        })\n    }\n}\n\nexport const CREATE_ROOM = 'CREATE_ROOM'\nexport const CREATE_ROOM_SUCCESS = 'CREATE_ROOM_SUCCESS'\n\nexport const createRoom = async ({authContext, roomsContext, data, history}) => {\n    roomsContext.dispatch({\n        type: CREATE_ROOM,\n        payload: {loading: true}\n    })\n    const response = await makeAuthRequest({\n        url: `${API_URL}/rooms/create`,\n        method: 'post',\n        data\n    })(authContext)\n    if (response) {\n        roomsContext.dispatch({\n            type: CREATE_ROOM_SUCCESS,\n            payload: {data: response.data, loading: false}\n        })\n        showSuccess('Room created')\n        history.push('/rooms')\n    } else {\n        roomsContext.dispatch({\n            type: FETCH_ROOMS,\n            payload: {loading: true}\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}