{"ast":null,"code":"import { API_URL } from '../../config/constants';\nimport { makeAuthRequest } from '../../helpers/requestHelpers';\nimport { showSuccess } from '../Global/Toast';\nimport moment from 'moment';\nexport const FETCH_COURSE = 'FETCH_COURSE';\nexport const DELETE_COURSE_SUCCESS = 'DELETE_COURSE_SUCCESS';\nexport const FETCH_COURSE_SUCCESS = 'FETCH_COURSE_SUCCESS';\nexport const getCourse = async (authContext, coursesContext, id = '') => {\n  coursesContext.dispatch({\n    type: FETCH_COURSE,\n    payload: {\n      currentTime: moment()\n    }\n  });\n  const response = await makeAuthRequest({\n    url: `${API_URL}/classes/${id}`,\n    method: 'get'\n  })(authContext);\n  response && coursesContext.dispatch({\n    type: FETCH_COURSE_SUCCESS,\n    payload: response.data\n  });\n};\nexport const deleteCourse = async ({\n  id,\n  authContext,\n  coursesContext,\n  history\n}) => {\n  const response = await makeAuthRequest({\n    url: `${API_URL}/classes/remove/${id}`,\n    method: 'delete'\n  })(authContext, true);\n\n  if (response) {\n    coursesContext && coursesContext.dispatch({\n      type: DELETE_COURSE_SUCCESS,\n      payload: id\n    });\n    coursesContext && showSuccess('Course deleted');\n    history.push('/courses');\n  }\n};\nexport const updateCourse = async ({\n  id,\n  authContext,\n  coursesContext,\n  history,\n  data\n}) => {\n  const response = await makeAuthRequest({\n    url: `${API_URL}/classes/update/${id}`,\n    method: 'put',\n    data\n  })(authContext, true);\n\n  if (response) {\n    coursesContext && coursesContext.dispatch({\n      payload: id\n    });\n    showSuccess('Course updated');\n    history.push('/courses');\n  }\n};","map":{"version":3,"sources":["/Users/emilian.radu/Developer/AIProject/frontend/src/components/Courses/ActiveCourseActions.js"],"names":["API_URL","makeAuthRequest","showSuccess","moment","FETCH_COURSE","DELETE_COURSE_SUCCESS","FETCH_COURSE_SUCCESS","getCourse","authContext","coursesContext","id","dispatch","type","payload","currentTime","response","url","method","data","deleteCourse","history","push","updateCourse"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,wBAAtB;AACA,SAAQC,eAAR,QAA8B,8BAA9B;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,SAAS,GAAG,OAAOC,WAAP,EAAoBC,cAApB,EAAoCC,EAAE,GAAG,EAAzC,KAAgD;AACrED,EAAAA,cAAc,CAACE,QAAf,CAAwB;AACpBC,IAAAA,IAAI,EAAER,YADc;AAEpBS,IAAAA,OAAO,EAAE;AAACC,MAAAA,WAAW,EAAEX,MAAM;AAApB;AAFW,GAAxB;AAIA,QAAMY,QAAQ,GAAG,MAAMd,eAAe,CAAC;AACnCe,IAAAA,GAAG,EAAG,GAAEhB,OAAQ,YAAWU,EAAG,EADK;AAEnCO,IAAAA,MAAM,EAAE;AAF2B,GAAD,CAAf,CAGpBT,WAHoB,CAAvB;AAIAO,EAAAA,QAAQ,IAAIN,cAAc,CAACE,QAAf,CAAwB;AAChCC,IAAAA,IAAI,EAAEN,oBAD0B;AAEhCO,IAAAA,OAAO,EAAEE,QAAQ,CAACG;AAFc,GAAxB,CAAZ;AAKH,CAdM;AAiBP,OAAO,MAAMC,YAAY,GAAG,OAAO;AAACT,EAAAA,EAAD;AAAKF,EAAAA,WAAL;AAAkBC,EAAAA,cAAlB;AAAkCW,EAAAA;AAAlC,CAAP,KAAsD;AAC9E,QAAML,QAAQ,GAAG,MAAMd,eAAe,CAAC;AACnCe,IAAAA,GAAG,EAAG,GAAEhB,OAAQ,mBAAkBU,EAAG,EADF;AAEnCO,IAAAA,MAAM,EAAE;AAF2B,GAAD,CAAf,CAItBT,WAJsB,EAIT,IAJS,CAAvB;;AAKA,MAAIO,QAAJ,EAAc;AACVN,IAAAA,cAAc,IAAIA,cAAc,CAACE,QAAf,CAAwB;AACtCC,MAAAA,IAAI,EAAEP,qBADgC;AAEtCQ,MAAAA,OAAO,EAAEH;AAF6B,KAAxB,CAAlB;AAIAD,IAAAA,cAAc,IAAIP,WAAW,CAAC,gBAAD,CAA7B;AACAkB,IAAAA,OAAO,CAACC,IAAR,CAAa,UAAb;AACH;AACJ,CAdM;AAiBP,OAAO,MAAMC,YAAY,GAAG,OAAO;AAACZ,EAAAA,EAAD;AAAKF,EAAAA,WAAL;AAAkBC,EAAAA,cAAlB;AAAkCW,EAAAA,OAAlC;AAA2CF,EAAAA;AAA3C,CAAP,KAA4D;AACpF,QAAMH,QAAQ,GAAG,MAAMd,eAAe,CAAC;AACnCe,IAAAA,GAAG,EAAG,GAAEhB,OAAQ,mBAAkBU,EAAG,EADF;AAEnCO,IAAAA,MAAM,EAAE,KAF2B;AAGnCC,IAAAA;AAHmC,GAAD,CAAf,CAKtBV,WALsB,EAKT,IALS,CAAvB;;AAMA,MAAIO,QAAJ,EAAc;AACVN,IAAAA,cAAc,IAAIA,cAAc,CAACE,QAAf,CAAwB;AACtCE,MAAAA,OAAO,EAAEH;AAD6B,KAAxB,CAAlB;AAGAR,IAAAA,WAAW,CAAC,gBAAD,CAAX;AACAkB,IAAAA,OAAO,CAACC,IAAR,CAAa,UAAb;AACH;AACJ,CAdM","sourcesContent":["import {API_URL} from '../../config/constants'\nimport {makeAuthRequest} from '../../helpers/requestHelpers'\nimport {showSuccess} from '../Global/Toast'\nimport moment from 'moment'\n\nexport const FETCH_COURSE = 'FETCH_COURSE'\nexport const DELETE_COURSE_SUCCESS = 'DELETE_COURSE_SUCCESS'\nexport const FETCH_COURSE_SUCCESS = 'FETCH_COURSE_SUCCESS'\nexport const getCourse = async (authContext, coursesContext, id = '') => {\n    coursesContext.dispatch({\n        type: FETCH_COURSE,\n        payload: {currentTime: moment()}\n    })\n    const response = await makeAuthRequest({\n        url: `${API_URL}/classes/${id}`,\n        method: 'get'\n    })(authContext)\n    response && coursesContext.dispatch({\n        type: FETCH_COURSE_SUCCESS,\n        payload: response.data\n    })\n\n}\n\n\nexport const deleteCourse = async ({id, authContext, coursesContext, history}) => {\n    const response = await makeAuthRequest({\n        url: `${API_URL}/classes/remove/${id}`,\n        method: 'delete'\n    })\n    (authContext, true)\n    if (response) {\n        coursesContext && coursesContext.dispatch({\n            type: DELETE_COURSE_SUCCESS,\n            payload: id\n        })\n        coursesContext && showSuccess('Course deleted')\n        history.push('/courses')\n    }\n}\n\n\nexport const updateCourse = async ({id, authContext, coursesContext, history, data}) => {\n    const response = await makeAuthRequest({\n        url: `${API_URL}/classes/update/${id}`,\n        method: 'put',\n        data\n    })\n    (authContext, true)\n    if (response) {\n        coursesContext && coursesContext.dispatch({\n            payload: id\n        })\n        showSuccess('Course updated')\n        history.push('/courses')\n    }\n}\n"]},"metadata":{},"sourceType":"module"}