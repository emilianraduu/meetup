{"ast":null,"code":"import { API_URL, GA_URL } from '../../config/constants';\nimport { makeAuthRequest, stringifyQuery } from '../../helpers/requestHelpers';\nimport { showSuccess } from '../Global/Toast';\nexport const GET_TIMETABLE = 'GET_TIMETABLE';\nexport const GET_TIMETABLE_SUCCESS = 'GET_TIMETABLE_SUCCESS';\nexport const GET_TIMETABLE_FAIL = 'GET_TIMETABLE_FAIL';\nexport const getTimetable = async ({\n  authContext,\n  timetableContext\n}) => {\n  timetableContext.dispatch({\n    type: GET_TIMETABLE,\n    payload: {\n      loading: true\n    }\n  });\n  const response = await makeAuthRequest({\n    url: `${API_URL}/timetable`,\n    method: 'get'\n  })(authContext);\n\n  if (response) {\n    timetableContext.dispatch({\n      type: GET_TIMETABLE_SUCCESS,\n      payload: {\n        data: response.data,\n        loading: false\n      }\n    });\n  } else {\n    timetableContext.dispatch({\n      type: GET_TIMETABLE_FAIL,\n      payload: {\n        loading: true\n      }\n    });\n  }\n};\nexport const CREATE_TIMETABLE = 'CREATE_TIMETABLE';\nexport const CREATE_TIMETABLE_SUCCESS = 'CREATE_TIMETABLE_SUCCESS';\nexport const CREATE_TIMETABLE_FAIL = 'CREATE_TIMETABLE_FAIL';\nexport const createTimetable = async ({\n  authContext,\n  timetableContext,\n  data,\n  history\n}) => {\n  timetableContext.dispatch({\n    type: CREATE_TIMETABLE,\n    payload: {\n      loading: true\n    }\n  });\n  const response = await makeAuthRequest({\n    url: `${API_URL}/timetable/create`,\n    method: 'post',\n    data\n  })(authContext);\n\n  if (response) {\n    timetableContext.dispatch({\n      type: CREATE_TIMETABLE_SUCCESS,\n      payload: {\n        data: response.data,\n        loading: false\n      }\n    });\n    showSuccess('Timetable created!');\n    history.push('/timetable');\n  } else {\n    timetableContext.dispatch({\n      type: CREATE_TIMETABLE_FAIL,\n      payload: {\n        loading: false\n      }\n    });\n  }\n};\nexport const ASSIGN_TIMETABLE = 'ASSIGN_TIMETABLE';\nexport const ASSIGN_TIMETABLE_SUCCESS = 'ASSIGN_TIMETABLE_SUCCESS';\nexport const ASSIGN_TIMETABLE_FAIL = 'ASSIGN_TIMETABLE_FAIL';\nexport const assignTimetable = async ({\n  authContext,\n  timetableContext,\n  history,\n  courses,\n  users,\n  events,\n  times,\n  depts,\n  rooms\n}) => {\n  timetableContext.dispatch({\n    type: ASSIGN_TIMETABLE,\n    payload: {\n      loading: true\n    }\n  });\n  const response = await makeAuthRequest({\n    url: `${GA_URL}`,\n    method: 'post',\n    data: {\n      courses,\n      teachers: users,\n      events,\n      times,\n      depts,\n      rooms\n    }\n  })(authContext);\n\n  if (response) {\n    timetableContext.dispatch({\n      type: ASSIGN_TIMETABLE_SUCCESS,\n      payload: {\n        data: response.data,\n        loading: false\n      }\n    });\n    showSuccess('Timetable assigned!');\n    history.push('/timetable');\n  } else {\n    timetableContext.dispatch({\n      type: ASSIGN_TIMETABLE_FAIL,\n      payload: {\n        loading: false\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/emilian.radu/Developer/AIProject/frontend/src/components/Timetable/TimetableActions.js"],"names":["API_URL","GA_URL","makeAuthRequest","stringifyQuery","showSuccess","GET_TIMETABLE","GET_TIMETABLE_SUCCESS","GET_TIMETABLE_FAIL","getTimetable","authContext","timetableContext","dispatch","type","payload","loading","response","url","method","data","CREATE_TIMETABLE","CREATE_TIMETABLE_SUCCESS","CREATE_TIMETABLE_FAIL","createTimetable","history","push","ASSIGN_TIMETABLE","ASSIGN_TIMETABLE_SUCCESS","ASSIGN_TIMETABLE_FAIL","assignTimetable","courses","users","events","times","depts","rooms","teachers"],"mappings":"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","sourcesContent":["import {API_URL, GA_URL} from '../../config/constants'\r\nimport {makeAuthRequest, stringifyQuery} from '../../helpers/requestHelpers'\r\nimport {showSuccess} from '../Global/Toast'\r\n\r\n\r\nexport const GET_TIMETABLE = 'GET_TIMETABLE'\r\nexport const GET_TIMETABLE_SUCCESS = 'GET_TIMETABLE_SUCCESS'\r\nexport const GET_TIMETABLE_FAIL = 'GET_TIMETABLE_FAIL'\r\n\r\nexport const getTimetable = async ({authContext, timetableContext}) => {\r\n    timetableContext.dispatch({\r\n        type: GET_TIMETABLE,\r\n        payload: {loading: true}\r\n    })\r\n    const response = await makeAuthRequest({\r\n        url: `${API_URL}/timetable`,\r\n        method: 'get'\r\n    })(authContext)\r\n    if (response) {\r\n        timetableContext.dispatch({\r\n            type: GET_TIMETABLE_SUCCESS,\r\n            payload: {data: response.data, loading: false}\r\n        })\r\n    } else {\r\n        timetableContext.dispatch({\r\n            type: GET_TIMETABLE_FAIL,\r\n            payload: {loading: true}\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const CREATE_TIMETABLE = 'CREATE_TIMETABLE'\r\nexport const CREATE_TIMETABLE_SUCCESS = 'CREATE_TIMETABLE_SUCCESS'\r\nexport const CREATE_TIMETABLE_FAIL = 'CREATE_TIMETABLE_FAIL'\r\n\r\nexport const createTimetable = async ({authContext, timetableContext, data, history}) => {\r\n    timetableContext.dispatch({\r\n        type: CREATE_TIMETABLE,\r\n        payload: {loading: true}\r\n    })\r\n    const response = await makeAuthRequest({\r\n        url: `${API_URL}/timetable/create`,\r\n        method: 'post',\r\n        data\r\n    })(authContext)\r\n    if (response) {\r\n        timetableContext.dispatch({\r\n            type: CREATE_TIMETABLE_SUCCESS,\r\n            payload: {data: response.data, loading: false}\r\n        })\r\n        showSuccess('Timetable created!')\r\n        history.push('/timetable')\r\n    } else {\r\n        timetableContext.dispatch({\r\n            type: CREATE_TIMETABLE_FAIL,\r\n            payload: {loading: false}\r\n        })\r\n    }\r\n}\r\n\r\nexport const ASSIGN_TIMETABLE = 'ASSIGN_TIMETABLE'\r\nexport const ASSIGN_TIMETABLE_SUCCESS = 'ASSIGN_TIMETABLE_SUCCESS'\r\nexport const ASSIGN_TIMETABLE_FAIL = 'ASSIGN_TIMETABLE_FAIL'\r\n\r\nexport const assignTimetable = async ({authContext, timetableContext, history, courses, users, events, times, depts, rooms}) => {\r\n    timetableContext.dispatch({\r\n        type: ASSIGN_TIMETABLE,\r\n        payload: {loading: true}\r\n    })\r\n    const response = await makeAuthRequest({\r\n        url: `${GA_URL}`,\r\n        method: 'post',\r\n        data: {\r\n            courses,\r\n            teachers: users,\r\n            events,\r\n            times,\r\n            depts,\r\n            rooms\r\n        }\r\n    })(authContext)\r\n    if (response) {\r\n        timetableContext.dispatch({\r\n            type: ASSIGN_TIMETABLE_SUCCESS,\r\n            payload: {data: response.data, loading: false}\r\n        })\r\n        showSuccess('Timetable assigned!')\r\n        history.push('/timetable')\r\n    } else {\r\n        timetableContext.dispatch({\r\n            type: ASSIGN_TIMETABLE_FAIL,\r\n            payload: {loading: false}\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}