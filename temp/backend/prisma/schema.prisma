datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator prisma {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["orderByRelation"]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  lastName  String?
  firstName String?
  pubs      Pub[]    @relation("Owner")
  waiter    Pub[]    @relation("Waiters")
  reviews   Review[] @relation("Reviewer")
  status    String   @default("CLIENT")
  waitedTables Table? @relation("Waiter")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pub {
  id        Int         @id @default(autoincrement())
  address   String      @unique
  images    String[]
  name      String      @unique
  reviews   Review[]    @relation("ReviewedPub")
  locations Location[]  @relation("Pub")
  owner     User        @relation(name: "Owner", fields: [ownerId], references: [id])
  ownerId   Int
  waiters   User[]      @relation(name: "Waiters", fields: [waiterId], references: [id])
  waiterId  Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}


model Location {
  id        Int      @id @default(autoincrement())
  name      String
  tables    Table[]  @relation("Locate")
  Pub       Pub      @relation(name: "Pub", fields: [pubId], references: [id])
  pubId     Int
}

model Table {
  id        Int      @id @default(autoincrement())
  count     Int
  occupied  Boolean  @default(false)
  blocked   Boolean  @default(false)
  reason    String?
  xPos      Int
  yPos      Int
  name      String?
  location  Location @relation(name: "Locate", fields: [tableId], references: [id])
  tableId   Int
  waiter    User?    @relation(name: "Waiter", fields: [waiterId], references: [id])
  waiterId  Int
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  user      User     @relation(name: "Reviewer", fields: [userId], references: [id])
  userId    Int
  pub       Pub     @relation(name: "ReviewedPub", fields: [pubId], references: [id])
  pubId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
